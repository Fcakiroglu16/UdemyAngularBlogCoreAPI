// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UdemyAngularBlogCore.API.Models;

namespace UdemyAngularBlogCore.API.Migrations
{
    [DbContext(typeof(UdemyAngularBlogDBContext))]
    partial class UdemyAngularBlogDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UdemyAngularBlogCore.API.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<string>("ContentMain")
                        .IsRequired()
                        .HasColumnName("content_main");

                    b.Property<string>("ContentSummary")
                        .IsRequired()
                        .HasColumnName("content_summary")
                        .HasMaxLength(500);

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .HasMaxLength(300);

                    b.Property<DateTime>("PublishDate")
                        .HasColumnName("publish_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(500);

                    b.Property<int>("ViewCount")
                        .HasColumnName("viewCount");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ContentMain = "Makale içerik 1",
                            ContentSummary = "Makale özet 1",
                            PublishDate = new DateTime(2019, 11, 20, 10, 45, 43, 269, DateTimeKind.Local).AddTicks(9658),
                            Title = "Makale 1",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ContentMain = "Makale içerik 2",
                            ContentSummary = "Makale özet 2",
                            PublishDate = new DateTime(2019, 11, 20, 10, 45, 43, 271, DateTimeKind.Local).AddTicks(7345),
                            Title = "Makale 2",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("UdemyAngularBlogCore.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Asp.Net Core"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Angular 8"
                        });
                });

            modelBuilder.Entity("UdemyAngularBlogCore.API.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id");

                    b.Property<string>("ContentMain")
                        .IsRequired()
                        .HasColumnName("content_main");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<DateTime>("PublishDate")
                        .HasColumnName("publish_date")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("UdemyAngularBlogCore.API.Models.Article", b =>
                {
                    b.HasOne("UdemyAngularBlogCore.API.Models.Category", "Category")
                        .WithMany("Article")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Article_Category")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UdemyAngularBlogCore.API.Models.Comment", b =>
                {
                    b.HasOne("UdemyAngularBlogCore.API.Models.Article", "Article")
                        .WithMany("Comment")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK_Comment_Article")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
